#include <stdio.h>
#include <stdlib.h>

#define MAX 100


typedef struct {
    int items[MAX];
    int front;
    int rear;
} Queue;

typedef struct {
    int vertices;
    int adjMatrix[MAX][MAX];
} Graph;


void initializeQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}


int isEmpty(Queue* q) {
    return q->front == -1;
}


void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue overflow\n");
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}


int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue underflow\n");
        return -1;
    }
    int item = q->items[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return item;
}


void bfs(Graph* graph, int startVertex) {
    int visited[MAX] = {0};
    Queue q;
    initializeQueue(&q);
    printf("BFS Traversal Order: ");
    enqueue(&q, startVertex);
    visited[startVertex] = 1;

    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);


        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                enqueue(&q, i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}


int main() {
    Graph graph;
    graph.vertices = 6;
    for (int i = 0; i < graph.vertices; i++) {
        for (int j = 0; j < graph.vertices; j++) {
            graph.adjMatrix[i][j] = 0;
        }
    }


    graph.adjMatrix[0][1] = 1;
    graph.adjMatrix[0][2] = 1;
    graph.adjMatrix[1][0] = 1;
    graph.adjMatrix[1][3] = 1;
    graph.adjMatrix[1][4] = 1;
    graph.adjMatrix[2][0] = 1;
    graph.adjMatrix[2][5] = 1;
    graph.adjMatrix[3][1] = 1;
    graph.adjMatrix[4][1] = 1;
    graph.adjMatrix[4][5] = 1;
    graph.adjMatrix[5][2] = 1;
    graph.adjMatrix[5][4] = 1;


    bfs(&graph, 0);

    return 0;
}
