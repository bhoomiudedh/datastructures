


#include<stdio.h>
#include<stdlib.h>
struct node {
int data;
struct node *next;
};

struct node *head=NULL;

void push();
void delete_at_front();
void delete_at_end();
void delete_at_pos();
void display();


void push()
{
struct node *ptr;
int item;
ptr = (struct node *) malloc(sizeof(struct node *));
 if(ptr == NULL)
{
  printf("\nOverflow");
}
else
{
  printf("\nEnter value\n");
   scanf("%d",&item);
  ptr->data = item;
  ptr->next = head;
  head = ptr;
  printf("\nNode inserted");
}
}

void delete_at_front()
{
struct node *ptr;
if (head == NULL)
{
printf("\nList is empty\n");
}
else
{
ptr = head;
head = ptr->next;
free(ptr);
printf("\nNode deleted from the beginning\n");
}
}

void delete_at_end()
{
struct node *ptr, *ptr1;
if(head == NULL)
{
printf("\nlist is empty");
}
else if (head -> next == NULL)
{
head = NULL;
free (head);
printf("\nOnly node deleted ...\n");
}
else
{
ptr = head;
while(ptr->next != NULL)
{
ptr1 = ptr;
ptr=ptr ->next;
}
ptr1->next = NULL;
free(ptr);
printf("\nDeleted Node from the last ...\n");
}
}

void delete_at_pos()
{
struct node *ptr, *ptr1;
int loc,i;
printf("\n Enter the location: \n");
scanf("%d", &loc);
if(head==NULL)
printf("empty list\n");
else{
    ptr=head;
    while(ptr->next!=loc)
    {
        ptr1=ptr;
        ptr=ptr->next;
    }
    ptr1->next=ptr->next;
    free(ptr);
}

}


void display()
{
struct node *ptr;
ptr = head;
if(ptr == NULL)
{

printf("empty");
}
else
{
printf("\nlinked list is:\n");
while(ptr!=NULL){
    printf("%d\n",ptr->data);
    ptr=ptr->next;
}
}
}
void main()
{
int choice =0;
while(choice != 6) {
printf("\n\n*********Main Menu*********\n");
printf("\nChoose one option\n");
printf("\n1. Insert \n2.Delete from Beginning\n3. Delete from last\n4. Delete node after position\n5.Show\n6.Exit\n");
printf("\nEnter your choice:\n");
scanf("\n%d",&choice);
switch(choice){
case 1:
push();
break;
case 2:
delete_at_front();
break;
case 3:
delete_at_end();
break;
case 4:
delete_at_pos();
break;
case 5:
display();
break;
case 6:
exit(0);
break;
default:
    printf("\ninvalid choice.try again.");
}
}
}

