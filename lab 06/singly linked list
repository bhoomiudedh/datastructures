#include<stdio.h>
#include<conio.h>

struct node{
    int data;
    struct node *next;
};

struct node *head = NULL;
struct node *head1 = NULL;

void insert(int x){
    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    new_node -> data = x;
    new_node -> next = NULL;
    if(head==NULL)
    {
        head = new_node;
    }
    else{
        struct node *temp = head;
        while(temp -> next != NULL)
            temp = temp -> next;
        temp -> next = new_node;
    }
}

void insert2(int x){
    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    new_node -> data = x;
    new_node -> next = NULL;
    if(head1==NULL)
    {
        head1 = new_node;
    }
    else{
        struct node *temp = head1;
        while(temp -> next != NULL)
            temp = temp -> next;
        temp -> next = new_node;
    }
}

struct node *sort(struct node *head)
{
        struct node *ptr = head;
        struct node *nextptr = head;
        int item;
        if(ptr == NULL)
        {
            printf("Empty");
            return;
        }

        for(ptr=head; ptr!=NULL; ptr=ptr->next)
        {
            for(nextptr=ptr->next; nextptr!=NULL; nextptr=nextptr->next)
            {
                if(ptr->data > nextptr -> data)
                {
                    item = ptr->data;
                    ptr -> data = nextptr -> data;
                    nextptr -> data = item;
                }
            }
        }
        return(head);
}

struct node *concatenate(struct node *head, struct node *head1)
{
        if(head1!=NULL && head1!=NULL)
        {
            if(head->next==NULL)
            {
                head->next=head1;
            }
            else concatenate(head->next, head1);
        }
        else printf("Either of them is empty");
        return(head);
}

struct node *reverse(struct node *head)
{
        struct node *prev = NULL;
        struct node *next = NULL;
        struct node *current = head;
        while(current!=NULL)
        {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        head = prev;
        return(head);
}

void display(struct node *head)
{
    struct node *ptr = head;
    while(ptr != NULL)
    {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

void main(){
    insert(9);
    insert(43);
    insert(55);
    insert(34);
    insert(8);
    display(head);

    insert2(1);
    insert2(90);
    insert2(65);
    insert2(85);
    insert2(24);
    display(head1);

    struct node *a = sort(head);
    printf("Sorted list 1: ");
    display(a);
    struct node *b=sort(head1);
    display(b);
    struct node *c=concatenate(a, b);
    display(c);
    struct node *d=reverse(c);
    display(d);
}
